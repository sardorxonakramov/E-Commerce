from django.db import models
from django.utils.translation import gettext_lazy as _  # noqa

from Common.models import BaseModel
from products.models.upload import Upload
from Common.utils import default_translation  



class Category(BaseModel):
    name = models.JSONField(
        default=default_translation
    )
    parent = models.ForeignKey("self", on_delete=models.CASCADE, null=True, blank=True, related_name="children")
    image = models.ForeignKey(Upload, on_delete=models.CASCADE, null=True, blank=True, related_name="categories")

    class Meta:
        db_table = "categories"
        verbose_name = _("Category")
        verbose_name_plural = _("Categories")
        ordering = ["name"]
# -------------------------
from django.db import models
from django.utils.translation import gettext_lazy as _  # noqa

#
from Common.models import BaseModel


#
#
class Comment(BaseModel):
    product = models.ForeignKey("products.Product", on_delete=models.CASCADE, related_name="comments")
    full_name = models.CharField(max_length=255)  # visitor name
    rate = models.IntegerField()  # 1â€“5 stars
    comment = models.TextField()

    class Meta:
        db_table = "comments"
        verbose_name = _("Comment")
        verbose_name_plural = _("Comments")
        ordering = ["-created_at"]
# ----------------------------
from django.db import models
from django.utils.translation import gettext_lazy as _  # noqa

#
from Common.models import BaseModel


#
#
class Discount(BaseModel):
    product = models.ForeignKey("products.Product", on_delete=models.CASCADE, related_name="discounts")
    price = models.DecimalField(max_digits=10, decimal_places=2)
    percentage = models.IntegerField()  # e.g. 20 means 20% off
    expired_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        db_table = "discounts"
        verbose_name = _("Discount")
        verbose_name_plural = _("Discounts")
        ordering = ["-created_at"]
# ---------------------
from django.db import models

from Common.choices.size import QualityChoice


class Upload(models.Model):
    file = models.FileField(upload_to="uploads/", null=True)
    quality = models.PositiveIntegerField(choices=QualityChoice.choices, null=True, blank=True)

    def __str__(self):
        return f"Upload {self.id}"
# -----------------------
from django.db import models
from django.utils.translation import gettext_lazy as _  # noqa

from Common.models import BaseModel
from Common.utils import default_translation  


class Product(BaseModel):
    category = models.ForeignKey(
        "products.Category",
        on_delete=models.CASCADE,
        related_name="products",
        null=True,
        blank=True,
    )
    name = models.JSONField(
        default=default_translation
    )
    description = models.JSONField(
        default=default_translation
    )
    price = models.DecimalField(max_digits=10, decimal_places=2)
    is_top = models.BooleanField(default=False)
    stock = models.PositiveIntegerField(default=0)

    def __str__(self):
        return f"{self.id}"

    @property
    def get_name_uz(self):
        return self.name.get("uz", "No Name")

    class Meta:
        db_table = "products"
        verbose_name = _("Product")
        verbose_name_plural = _("Products")
        ordering = ["-is_top", "name"]
# ------------------------
from django.db import models
from django.utils.translation import gettext_lazy as _  # noqa

from Common.models import BaseModel
from products.models.upload import Upload


class ProductImage(BaseModel):
    product = models.ForeignKey("products.Product", on_delete=models.CASCADE, related_name="images")
    image = models.ForeignKey(
        Upload, on_delete=models.CASCADE, related_name="product_images", verbose_name="Image Upload"
    )
    is_main = models.BooleanField(default=False, verbose_name=_("Is Main Image"))

    class Meta:
        db_table = "product_images"
        verbose_name = _("Product Image")
        verbose_name_plural = _("Product Images")
# ----------------------

mana product app ichidagii models/ ichidagi filelar kichik harflar bilan filega nom berilgan faqat image.py shunday nomlangan shulardan keraklisini olib product_list yozib ber real loyiha uchun paginatsiya ham esdan chiqmasin 